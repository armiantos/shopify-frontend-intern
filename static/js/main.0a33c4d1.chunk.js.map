{"version":3,"sources":["api/OMDb.ts","components/SearchBar.tsx","components/ClickableMovie.tsx","components/Banner.tsx","theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiKey","endpoint","searchMovies","title","a","axios","get","params","type","s","res","data","Response","Search","useStyles","makeStyles","theme","root","padding","display","alignItems","maxWidth","input","marginLeft","spacing","flex","SearchBar","onSearch","useState","searchTerm","setSearchTerm","classes","Paper","variant","className","color","InputBase","inputProps","onChange","e","target","value","onKeyDown","key","button","ClickableMovie","movie","buttonText","onClick","isClickDisabled","Box","Typography","Title","Year","Button","size","disableElevation","disabled","Banner","content","open","setOpen","Dialog","onClose","DialogContent","DialogContentText","createMuiTheme","typography","fontFamily","join","h1","fontWeight","fontSize","h2","h3","width","marginTop","paper","margin","item","marginBottom","App","searchResults","setSearchResults","nominations","setNominations","message","setMessage","nominate","length","removeFromNominations","filter","nomination","imdbID","isMovieNominated","some","useEffect","justifyContent","CssBaseline","ThemeProvider","gutterBottom","movies","Grid","container","sm","md","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a33c4d1.chunk.js","sourcesContent":["import axios from 'axios';\nimport { Movie, SearchResponse } from './data/SearchResponse';\n\nconst apiKey = 'e287055f';\nconst endpoint = `https://www.omdbapi.com`;\n\nexport async function searchMovies(title: string): Promise<Movie[]> {\n    const res = await axios.get<SearchResponse>(endpoint, {\n        params: {\n            apiKey,\n            type: 'movie',\n            s: title,\n        },\n    });\n\n    // When there are no matching movies from OMDb with given title\n    if (res.data.Response === 'False') {\n        return [];\n    }\n\n    return res.data.Search;\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\n\ntype SearchProps = {\n    onSearch: (searchTerm: string) => void;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        maxWidth: 400,\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n}));\n\nexport default function SearchBar({ onSearch }: SearchProps) {\n    const [searchTerm, setSearchTerm] = useState('');\n    const classes = useStyles();\n\n    return (\n        <Paper variant=\"outlined\" className={classes.root}>\n            <SearchIcon color=\"action\" />\n            <InputBase\n                className={classes.input}\n                inputProps={{ 'aria-label': 'Search' }}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                        onSearch(searchTerm);\n                    }\n                }}\n            />\n        </Paper>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Movie } from '../api/data/SearchResponse';\n\ntype ClickableMovieProps = {\n    movie: Movie;\n    buttonText: string;\n    onClick: (movie: Movie) => void;\n    isClickDisabled?: boolean;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n}));\n\nfunction ClickableMovie({\n    movie,\n    buttonText,\n    onClick,\n    isClickDisabled,\n}: ClickableMovieProps) {\n    const classes = useStyles();\n\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Typography variant=\"body1\">\n                {movie.Title} ({movie.Year})\n            </Typography>\n            <Button\n                className={classes.button}\n                size=\"small\"\n                disableElevation\n                onClick={() => onClick(movie)}\n                disabled={isClickDisabled ?? false}\n                variant=\"contained\"\n            >\n                {buttonText}\n            </Button>\n        </Box>\n    );\n}\n\nexport default ClickableMovie;\n","import React from 'react';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\n\nexport type BannerProps = {\n    content: string;\n    open: boolean;\n    setOpen: (open: boolean) => void;\n};\n\nfunction Banner({ content, open, setOpen }: BannerProps) {\n    return (\n        <Dialog open={open} onClose={() => setOpen(false)}>\n            <DialogContent>\n                <DialogContentText>{content}</DialogContentText>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\nexport default Banner;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: ['Open Sans', '-apple-system', 'sans-serif'].join(','),\n        h1: {\n            fontWeight: 700,\n            fontSize: 48,\n        },\n        h2: {\n            fontWeight: 600,\n            fontSize: 32,\n        },\n        h3: {\n            fontWeight: 400,\n            fontSize: 26,\n        },\n    },\n});\n\nexport default theme;\n","import React, { useEffect, useState } from 'react';\nimport { Movie } from './api/data/SearchResponse';\nimport { searchMovies } from './api/OMDb';\n\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport SearchBar from './components/SearchBar';\nimport ClickableMovie from './components/ClickableMovie';\nimport Banner from './components/Banner';\n\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\ntype SearchResults = {\n    title: string;\n    movies: Movie[];\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    title: {\n        marginTop: theme.spacing(5),\n    },\n    paper: {\n        padding: theme.spacing(3),\n        margin: theme.spacing(1),\n    },\n    item: {\n        marginBottom: theme.spacing(1),\n    },\n}));\n\nfunction App() {\n    const [searchResults, setSearchResults] = useState<SearchResults>();\n    const [nominations, setNominations] = useState<Movie[]>([]);\n\n    const [open, setOpen] = useState(false);\n    const [message, setMessage] = useState('');\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        if (nominations.length === 5) {\n            setMessage('Thank you! You have nominated 5 movies.');\n            setOpen(true);\n        }\n    }, [nominations]);\n\n    function nominate(movie: Movie) {\n        if (nominations.length === 5) {\n            setMessage('You have already nominated 5 movies');\n            setOpen(true);\n            return;\n        }\n\n        setNominations([...nominations, movie]);\n    }\n\n    function removeFromNominations(movie: Movie) {\n        setNominations(\n            nominations.filter(\n                (nomination) => nomination.imdbID !== movie.imdbID\n            )\n        );\n    }\n\n    function isMovieNominated(movie: Movie) {\n        return nominations.some(\n            (nomination) => nomination.imdbID === movie.imdbID\n        );\n    }\n\n    return (\n        <Box className={classes.root} display=\"flex\" justifyContent=\"center\">\n            <div className=\"App\">\n                <CssBaseline />\n\n                <ThemeProvider theme={theme}>\n                    <Banner open={open} setOpen={setOpen} content={message} />\n\n                    <header>\n                        <Typography variant=\"h1\" className={classes.title}>\n                            The Shoppies\n                        </Typography>\n                    </header>\n\n                    <Paper className={`Search ${classes.paper}`}>\n                        <Typography variant=\"h3\" gutterBottom>\n                            Movie title\n                        </Typography>\n                        <SearchBar\n                            onSearch={async (title) => {\n                                setSearchResults({\n                                    title,\n                                    movies: await searchMovies(title),\n                                });\n                            }}\n                        />\n                    </Paper>\n\n                    <Grid container>\n                        <Grid item sm={12} md={6}>\n                            <Paper className={`SearchResults ${classes.paper}`}>\n                                <Typography variant=\"h2\" gutterBottom>\n                                    Results for {searchResults?.title}\n                                </Typography>\n                                <ul>\n                                    {searchResults?.movies.map((movie) => (\n                                        <li\n                                            key={movie.imdbID}\n                                            className={classes.item}\n                                        >\n                                            <ClickableMovie\n                                                movie={movie}\n                                                buttonText=\"Nominate\"\n                                                onClick={nominate}\n                                                isClickDisabled={isMovieNominated(\n                                                    movie\n                                                )}\n                                            />\n                                        </li>\n                                    ))}\n                                </ul>\n                            </Paper>\n                        </Grid>\n\n                        <Grid item sm={12} md={6}>\n                            <Paper className={`Nominations ${classes.paper}`}>\n                                <Typography variant=\"h2\" gutterBottom>\n                                    Nominations\n                                </Typography>\n                                <ul>\n                                    {nominations.map((movie) => (\n                                        <li\n                                            key={movie.imdbID}\n                                            className={classes.item}\n                                        >\n                                            <ClickableMovie\n                                                movie={movie}\n                                                buttonText=\"Remove\"\n                                                onClick={removeFromNominations}\n                                            />\n                                        </li>\n                                    ))}\n                                </ul>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </ThemeProvider>\n            </div>\n        </Box>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}